}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 4)
# The Current Battle Against Coronavirus
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
paste(intro, fruits_o)
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub('a', 'ee', fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub('a', 'o', fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
paste(intro, fruits_o)
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub('a', 'ee', fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub('a', 'o', fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
# =====================================
# title: INFO 201 Functions Demo
# author: Daniel Chen
# date: January 14, 2020
# =====================================
#
#   In this demo, we will cover:
#
#   * Creating user-defined functions
#   * Calling user-defined functions
#
## Example 1. Earnings Calculator -----------------------------------------------
#
# We have the following R script
hours <-   # 35 hours were worked this week
pay_rate <-   # Pay rate was at Seattle minimum wage
earnings <-
earnings
# What if we wanted to do this for a 5 employees? what about for 50 employees?
# We could do it by hand but that is time consuming and error-prone.
# Instead, we can convert the above script into a function.
#
### 1.1 Defining Functions -------------------------------------------------------
#
# Defining function called 'calculate_earnings'
calculate_earnings <- function() {
earnings <-
return()
}
#
# Here, we created a function called 'calculate_earnings()'.
# It takes two arguments, it multiplies the first argument 'hours' with the second argument 'pay_rate'.
#
# **Question 1.** Which line of code will the function returned?
#
# **Answer:** ______________________________________
#
# **Question 2.** The function didn't return anything -- why not?
#
# **Answer:** ______________________________________
#
### 1.2 Calling Functions
#
# We can call calculate_earnings() to calculate the earnings of employee 1 who worked 10 hours this week and earns $12/hr.
#
# Calling function 'calculate earnings' for employee 1
employee1_earnings <- calculate_earnings()
print()
#
# We can call calculate_earnings() to calculate the earnings of employee 2 who worked 40 hours this week and earns $22/hr.
#
# Calling function 'calculate earnings' for employee 2
employee2_earnings <- calculate_earnings()
### 1.3 Reviewing Common Misconceptions -------------------------------------------
# **Question 3.** Think, pair, share - Why would the following function not work?
#
# ***Hint:*** The error message returned here is "unexpected numeric constant"
#
# **Answer:** ______________________________________
#
calculate_earnings <- function(10.0, 12.00) {
earnings <- hours * pay_rate
return(earnings)
}
# **Question 4.** Think, pair, share - Similarly, why would the following function not work?
#
# ***Hint:*** Error message returned is error in calculate_earnings(hours, pay_rate) : object 'hours' not found.
#
# **Answer:** ______________________________________
#
employee3_earnings <- calculate_earnings(hours, pay_rate)
print(employee3_earnings)
### 1.4 return() vs. print() ----------------------------------------------------------
#
# Now, what if I want to use the output that the function returns without having to use print() each time.
#
# Defining function called 'calculate_earnings_v2'
calculate_earnings_v2 <- function(hours, pay_rate) {
hours * pay_rate # You have to assign a returned value to a variable to use it
# printing a value is different from returning a value
}
employee3_earnings <- calculate_earnings_v2(60.0, 12.00)
## Example 2. Sentence Generator --------------------------------------------------------
#
# We can create a function to generate a sentence with the name of the last documentary you watched.
watch <- function() {
result <-
return(result)
}
current_show <- watch("")
print(current_show)
# Here, we created a function called 'watch()'.
# It takes one argument 'documentary' and attaches it to the end of the sentence "The last documentary that I watched is called".
#
# **Question 5.** What could be better in the following function?
#
# **Answer:** ______________________________________
watch <- function(Icarus) {
result <- print(paste("The last documentary I watched is called", Icarus))
return(result)
}
### 2.1 Functions with if-else statements
#
# Suppose we want a function that can classify your shows into either movies or tv-series based on its duration.
# For tv-series duration means the average run-time, in minutes, of an episode.
# The average movie duration is ~ 80 minutes.
# Using this information we can write the following function:
#
classify_shows <- function(show_name, minutes) {
if (minutes < 80) {
print(" ")
}  else {
print(" ")
}
return(c(title, minutes))
}
# **Question 6.** What will be returned when you run the following lines?
#
#   **Answer:** ______________________________________
classify_shows("Last Breath", 80)
classify_shows("Unbelievable", 50)
# END
employee1_earnings <- calculate_earnings(10, 12)
print(employee1_earnings)
hours <- 35.0 # 35 hours were worked this week
pay_rate <- 16.0 # Pay rate was at Seattle minimum wage
earnings <- hours * pay_rate
earnings
# What if we wanted to do this for a 5 employees? what about for 50 employees?
# We could do it by hand but that is time consuming and error-prone.
# Instead, we can convert the above script into a function.
#
### 1.1 Defining Functions -------------------------------------------------------
#
# Defining function called 'calculate_earnings'
calculate_earnings <- function(hours, pay_rate) {
earnings <- hours * pay_rate
return(earnings)
}
#
# Here, we created a function called 'calculate_earnings()'.
# It takes two arguments, it multiplies the first argument 'hours' with the second argument 'pay_rate'.
#
# **Question 1.** Which line of code will the function return?
#
# **Answer:** hours * pay_rate
#
# **Question 2.** The function didn't return anything -- why not?
#
# **Answer:** because we are just declaring the function, in order for it to return a value we
#             need to enter in values by calling the function (i.e. calculate_earnings(3, 4))
#
### 1.2 Calling Functions
#
# We can call calculate_earnings() to calculate the earnings of employee 1 who worked 10 hours this week and earns $12/hr.
#
# Calling function 'calculate earnings' for employee 1
employee1_earnings <- calculate_earnings(10, 12)
print(employee1_earnings)
employee2_earnings <- calculate_earnings(40, 22)
calculate_earnings_v2 <- function(hours, pay_rate) {
result <- hours * pay_rate # You have to assign a returned value to a variable to use it
print(result)  # printing a value is different from returning a value
}
employee3_earnings <- calculate_earnings_v2(60.0, 12.00)
employee3_earnings
current_show <- watch("Round Planet")
print(current_show)
# below is the fixed function, replace Icarus with doc
watch <- function(doc) {
result <- print(paste("The last documentary I watched is called", doc))
return(result)
}
classify_shows <- function(show_name, minutes) {
if (minutes < 80) {
print("Likely a TV show")
}  else {
print("Likely a movie")
}
return(c(show_name, minutes))
}
classify_shows("Last Breath", 80)
classify_shows("Unbelievable", 50)
# =====================================
# title: INFO 201 Functions Demo
# author: Daniel Chen
# date: January 14, 2020
# =====================================
#
#   In this demo, we will cover:
#
#   * Creating user-defined functions
#   * Calling user-defined functions
#
## Example 1. Earnings Calculator -----------------------------------------------
#
# We have the following R script
hours <- 35.0 # 35 hours were worked this week
pay_rate <- 16.0 # Pay rate was at Seattle minimum wage
earnings <- hours * pay_rate
earnings
# What if we wanted to do this for a 5 employees? what about for 50 employees?
# We could do it by hand but that is time consuming and error-prone.
# Instead, we can convert the above script into a function.
#
### 1.1 Defining Functions -------------------------------------------------------
#
# Defining function called 'calculate_earnings'
calculate_earnings <- function(hours, pay_rate) {
earnings <- hours * pay_rate
return(earnings)
}
#
# Here, we created a function called 'calculate_earnings()'.
# It takes two arguments, it multiplies the first argument 'hours' with the second argument 'pay_rate'.
#
# **Question 1.** Which line of code will the function return?
#
# **Answer:** hours * pay_rate
#
# **Question 2.** The function didn't return anything -- why not?
#
# **Answer:** because we are just declaring the function, in order for it to return a value we
#             need to enter in values by calling the function (i.e. calculate_earnings(3, 4))
#
### 1.2 Calling Functions
#
# We can call calculate_earnings() to calculate the earnings of employee 1 who worked 10 hours this week and earns $12/hr.
#
# Calling function 'calculate earnings' for employee 1
employee1_earnings <- calculate_earnings(10, 12)
print(employee1_earnings)
#
# We can call calculate_earnings() to calculate the earnings of employee 2 who worked 40 hours this week and earns $22/hr.
#
# Calling function 'calculate earnings' for employee 2
employee2_earnings <- calculate_earnings(40, 22)
### 1.3 Reviewing Common Misconceptions -------------------------------------------
# **Question 3.** Think, pair, share - Why would the following function not work?
#
# ***Hint:*** The error message returned here is "unexpected numeric constant"
#
# **Answer:** when writing a function we don't use values we only use values when we call a function
#             when we declare a function we instead use variables as parameters
#
# below is the fixed function, replace the values in the function declaration with variables
calculate_earnings <- function(hours, pay_rate) {
earnings <- hours * pay_rate
return(earnings)
}
# **Question 4.** Think, pair, share - Similarly, why would the following function not work?
#
# ***Hint:*** Error message returned is error in calculate_earnings(hours, pay_rate) : object 'hours' not found.
#
# **Answer:** when we call a function we input values, we cannot use variables or parameter names
#             unless we are inputting variables that have an assigned value, as in we could call
#             the function via calculate_earnings(hours, pay_rate) if we had already defined hours
#             and we had defined pay_rate before hand
#
# below is the fixed function, replaced the variables with arbitary values
employee3_earnings <- calculate_earnings(10, 12)
print(employee3_earnings)
### 1.4 return() vs. print() ----------------------------------------------------------
#
# Now, what if I want to use the output that the function returns without having to use print() each time.
#
# Defining function called 'calculate_earnings_v2'
calculate_earnings_v2 <- function(hours, pay_rate) {
result <- hours * pay_rate # You have to assign a returned value to a variable to use it
print(result)  # printing a value is different from returning a value
}
employee3_earnings <- calculate_earnings_v2(60.0, 12.00)
## Example 2. Sentence Generator --------------------------------------------------------
#
# We can create a function to generate a sentence with the name of the last documentary you watched.
watch <- function(doc) {
result <- paste("I watched", doc)
return(result)
}
current_show <- watch("Round Planet")
print(current_show)
# Here, we created a function called 'watch()'.
# It takes one argument 'documentary' and attaches it to the end of the sentence "The last documentary that I watched is called".
#
# **Question 5.** What could be better in the following function?
#
# **Answer:** the parameter is a proper noun and also we usually have the first letter be lower case
# below is the fixed function, replace Icarus with doc
watch <- function(doc) {
result <- print(paste("The last documentary I watched is called", doc))
return(result)
}
### 2.1 Functions with if-else statements
#
# Suppose we want a function that can classify your shows into either movies or tv-series based on its duration.
# For tv-series duration means the average run-time, in minutes, of an episode.
# The average movie duration is ~ 80 minutes.
# Using this information we can write the following function:
#
classify_shows <- function(show_name, minutes) {
if (minutes < 80) {
print("Likely a TV show")
}  else {
print("Likely a movie")
}
return(c(show_name, minutes))
}
# **Question 6.** What will be returned when you run the following lines?
#
#   **Answer:** The first function call will print "Likely a movie" and return a character vector
#               with the following c("Last Breath", 80)
#               The second function call will print "Likely a TV show and return a character vector
#               with the following c("Unbelievable", 50)
classify_shows("Last Breath", 80)
classify_shows("Unbelievable", 50)
# END
calculate_ratio <- function(x, y) {
ratio <- x / y
return(ratio)
}
calculate_ratio(60, 12)
intro <- function(year, major) {
greet <- paste("Hello I am a ", year, " year, and my major is ", major, ".", sep="")
return(greet)
}
# Call intro() function
intro("sophomore", "microbiology")
# Call intro() function
intro("second", "microbiology")
days_to_deadline <- function(deadline, today) {  # declares function that finds days till deadline given the deadline date and today's date
days_remaining <- as.Date(deadline) - as.Date(today)  # subtracts the current date from the deadline date to get the days remaining
return(days_remaining)  # returns the day remaining
}
a2_days_left <- days_to_deadline("2020-01-23", "2020-01-14")
winter_finals_end <- days_to_deadline("2020-03-20", "2020-01-14")
july_fourth <- days_to_deadline("2020-07-04", "2020-01-14")
a2_days_left
winter_finals_end
july_fourth
# =====================================
# title: "INFO 201 Lab 2 Exercises"
# author: Daniel Chen
# date: "January 14, 2020"
# =====================================
#
#   In groups of three, you will now work on the following exercises where you will practice:
#
#   * Creating user-defined functions
#   * Calling user-defined functions
#
#  REPLACE ALL THE '____' WITH YOUR SOLUTIONS.
#
# # Exercise 1. Ratio Calculator -------------------------------------------
#
#  1. Define function 'calculate_ratio()' that takes x and divides it by y.
#  2. Create the variable 'ratio' and assign your calculation to it.
#  3. Return ratio variable.
#  4. Call calculate_ratio() with arguments 60 and 12.
#
# Define calculate_ratio() function
calculate_ratio <- function(x, y) {
ratio <- x / y
return(ratio)
}
# Call calculate_ratio()
calculate_ratio(60, 12)
# Exercise 2. Introduction Generator ----------------------------------------
#
# 1. Define function 'intro()' that takes the following two arguments: year and major.
# 2. The function will return a character string of the format
#   "Hello I am a {YEAR} year, and my major is {MAJOR}." (replacing {YEAR} and {MAJOR} with the appropriate argument values).
# 3. Assign this character string to the variable 'greet'.
# 4. Return greet variable.
# 5. Call intro() function using your name and major as arguments.
#
#  Define intro() function
intro <- function(year, major) {
greet <- paste("Hello I am a ", year, " year, and my major is ", major, ".", sep="")
return(greet)
}
# Call intro() function
intro("second", "microbiology")
# Bonus: Exercise 3. Days Counter --------------------------------------------
#
# 1. Write code comments for each line to describe what the function is doing.
#
days_to_deadline <- function(deadline, today) {  # declares function that finds days till deadline given the deadline date and today's date
days_remaining <- as.Date(deadline) - as.Date(today)  # subtracts the current date from the deadline date to get the days remaining
return(days_remaining)  # returns the day remaining
}
# 2. What will each of the following lines return?
#   Note, you may need to print the variables.
a2_days_left <- days_to_deadline("2020-01-23", "2020-01-14")  # Time difference of 9 days
winter_finals_end <- days_to_deadline("2020-03-20", "2020-01-14") # Time difference of 66 days
july_fourth <- days_to_deadline("2020-07-04", "2020-01-14") # Time difference of 172 days
# END
setwd("~/OneDrive - UW/INFO_201/final_project/info201_final_project")
library("jsonlite")
json_file <- 'https://datahub.io/core/co2-ppm/datapackage.json'
json_file
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
dim("data/kaggle_global_temp/GlobalTemperatures.csv")
df = read.csv("data/kaggle_global_temp/GlobalTemperatures.csv")
df
colnames(df)
dim(df)
df = read.csv('data/kaggle_global_temp/GlobalLandTemperaturesByCountry.csv')
dim(df)
colnames(df)
df$dt
df = read.csv('data/kaggle_global_temp/GlobalLandTemperaturesByState.csv')
dim(df)
colnames(df)
dim$dt[0]
df$dt[0]
df$dt[1]
df$dt
df = read.csv('data/kaggle_global_temp/GlobalLandTemperaturesByMajorCity.csv')
dim(df)
df$dt
colnames(df)
df = read.csv('data/datahub_co2_ppm/co2-mm-mlo_csv.csv')
df
dim(df)
colnames(df)
df = read.csv('data/kaggle_natural_disaster/economic-damage-from-natural-disasters.csv')
dim(df)
colnames(df)
df = read.csv('data/kaggle_natural_disaster/number-of-natural-disaster-events.csv')
dim(df)
colnames(df)
df = read.csv('data/datahub_co2_ppm/co2-mm-mlo_csv.csv')
dim(df)
colnames(df)
df = read.csv('data/datahub_co2_ppm/co2-mm-gl_csv.csv')
colnames(df)
dim(df)
df$Average
co2 = df$Average
df = read.csv('data/kaggle_global_temp/GlobalTemperatures.csv')
df
is.data.frame(df)
mutate()
library(dplyr)
df = mutate(df, year=substring(Date, 1, 4))
df = mutate(df, year=substring(dt, 1, 4))
df %>% group_by(df = read.csv('data/datahub_co2_ppm/co2-mm-gl_csv.csv'))
df = read.csv('data/datahub_co2_ppm/co2-mm-gl_csv.csv')
plot(df$Average)
plot(df$Trend)
